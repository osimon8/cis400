{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport MapView, { Marker, Circle } from \"react-native-maps\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { sendMessage } from \"../api\";\nimport { UserContext } from \"../Context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function MapScreen(_ref) {\n  var userLongitude = _ref.userLongitude,\n      userLatitude = _ref.userLatitude,\n      retrievedFriends = _ref.retrievedFriends;\n  var authToken = useContext(UserContext);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(userLatitude),\n      _useState4 = _slicedToArray(_useState3, 2),\n      latitude = _useState4[0],\n      setLatitude = _useState4[1];\n\n  var _useState5 = useState(retrievedFriends),\n      _useState6 = _slicedToArray(_useState5, 2),\n      friends = _useState6[0],\n      setFriends = _useState6[1];\n\n  var _useState7 = useState(userLongitude),\n      _useState8 = _slicedToArray(_useState7, 2),\n      longitude = _useState8[0],\n      setLongitude = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      clickedFriend = _useState10[0],\n      setClickedFriend = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      clickedFriendId = _useState12[0],\n      setClickedFriendId = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      modalVisible = _useState14[0],\n      setModalVisible = _useState14[1];\n\n  var _useState15 = useState(null),\n      _useState16 = _slicedToArray(_useState15, 2),\n      errorMsg = _useState16[0],\n      setErrorMsg = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      isEnabled = _useState18[0],\n      setIsEnabled = _useState18[1];\n\n  var _useState19 = useState(\"\"),\n      _useState20 = _slicedToArray(_useState19, 2),\n      message = _useState20[0],\n      setMessage = _useState20[1];\n\n  var toggleSwitch = function toggleSwitch() {\n    return setIsEnabled(function (previousState) {\n      return !previousState;\n    });\n  };\n\n  var coordinates = {\n    latitude: latitude,\n    longitude: longitude\n  };\n  var coordinatesF = {\n    latitude: 39.96241611314298,\n    longitude: longitude\n  };\n\n  var handleOpen = function handleOpen(id, firstName, lastName) {\n    setClickedFriend(firstName + \" \" + lastName);\n    setClickedFriendId(id);\n    setModalVisible(true);\n  };\n\n  useEffect(function () {}, []);\n\n  var mapMarkers = function mapMarkers() {\n    if (friends) {\n      var oneMile = friends[\"1\"].map(function (item) {\n        var lat = latitude;\n        var long = longitude;\n        var nd = 1600 * Math.cos(-90) / 111111;\n        var ed = 600 * Math.sin(-90) / Math.cos(lat) / 111111;\n        console.log(item);\n        return _jsx(Marker, {\n          coordinate: {\n            latitude: lat + nd,\n            longitude: long + ed\n          },\n          pinColor: \"blue\",\n          onPress: function onPress() {\n            return handleOpen(item.id, item.firstName, item.lastName);\n          }\n        });\n      });\n      return oneMile;\n    }\n  };\n\n  var handleSendingMessage = function handleSendingMessage() {\n    if (message.match(/(?!^ +$)^.+$/)) {\n      var trimmedMessage = message.trim();\n      sendMessage(authToken, clickedFriendId, trimmedMessage).then(function (response) {\n        console.log(\"testing chating\", response);\n      }).catch(function (err) {\n        console.log(err);\n      });\n      setModalVisible(!modalVisible);\n      setMessage(\"\");\n      navigation.navigate(\"message\", {\n        friendId: clickedFriendId,\n        firstName: clickedFriend.split(\" \")[0],\n        lastName: clickedFriend.split(\" \")[1]\n      });\n    }\n  };\n\n  var text = \"Waiting..\";\n\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    console.log(\"hehehe\");\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      children: _jsxs(MapView, {\n        style: styles.map,\n        initialRegion: {\n          latitude: latitude,\n          longitude: longitude,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421\n        },\n        onPress: function onPress() {\n          return handleOpen;\n        },\n        children: [_jsx(Marker, {\n          coordinate: coordinates,\n          pinColor: \"#157106\"\n        }), mapMarkers(), _jsx(Circle, {\n          onPress: function onPress() {\n            return console.log(\"pressed\");\n          },\n          center: coordinates,\n          radius: 3200,\n          strokeWidth: 1,\n          strokeColor: \"#C86F6F\",\n          fillColor: \"rgba(230,238,255,0.1)\"\n        }), _jsx(Circle, {\n          onPress: function onPress() {\n            return console.log(\"pressed\");\n          },\n          center: coordinates,\n          radius: 1609,\n          strokeWidth: 1,\n          strokeColor: \"#1a66ff\",\n          fillColor: \"rgba(230,238,255)\",\n          zIndex: 3\n        }), _jsx(Circle, {\n          onPress: function onPress() {\n            return console.log(\"pressed\");\n          },\n          center: coordinates,\n          radius: 4800,\n          strokeWidth: 1,\n          strokeColor: \"#1a66ff\",\n          fillColor: \"rgba(230,238,255,0.5)\",\n          zIndex: 1\n        })]\n      })\n    }), _jsx(Modal, {\n      animationType: \"fade\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert(\"Modal has been closed.\");\n        setModalVisible(!modalVisible);\n      },\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsx(View, {\n            style: {\n              width: \"100%\",\n              backgroundColor: \"blue\",\n              marginBottom: 30\n            },\n            children: _jsx(View, {\n              style: {\n                position: \"absolute\",\n                right: 0\n              },\n              children: _jsx(Button, {\n                title: \"Close\",\n                onPress: function onPress() {\n                  setMessage(\"\");\n                  setModalVisible(!modalVisible);\n                }\n              })\n            })\n          }), _jsx(Image, {\n            style: styles.imageModal,\n            source: {\n              uri: \"https://images-na.ssl-images-amazon.com/images/I/81nKBuQzyjL.jpg\"\n            }\n          }), _jsx(Text, {\n            style: {\n              fontSize: 28\n            },\n            children: clickedFriend\n          }), _jsx(Text, {\n            children: \"Quick Texts\"\n          }), _jsxs(View, {\n            style: {\n              width: \"80%\",\n              marginTop: 10\n            },\n            children: [_jsx(TouchableOpacity, {\n              style: {\n                flexDirection: \"column\"\n              },\n              onPress: function onPress() {\n                setMessage(\"Wanna get some lunch?\");\n              },\n              children: _jsx(View, {\n                style: styles.button,\n                children: _jsx(Text, {\n                  children: \"Wanna get some lunch?\"\n                })\n              })\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                setMessage(\"What are you up to?\");\n              },\n              children: _jsx(View, {\n                style: styles.button,\n                children: _jsx(Text, {\n                  children: \"What are you up to?\"\n                })\n              })\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                setMessage(\"Wanna grab a drink?\");\n              },\n              children: _jsx(View, {\n                style: styles.button,\n                children: _jsx(Text, {\n                  children: \"Wanna grab a drink?\"\n                })\n              })\n            })]\n          }), _jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              borderWidth: 1,\n              borderColor: \"#DDDDDD\",\n              borderRadius: 40,\n              paddingLeft: 15,\n              paddingRight: 15,\n              width: \"80%\"\n            },\n            children: [_jsx(View, {\n              style: {\n                flex: 2.25\n              },\n              children: _jsx(TextInput, {\n                value: message,\n                style: styles.input,\n                placeholder: \"useless placeholder\",\n                onChangeText: function onChangeText(e) {\n                  setMessage(e);\n                }\n              })\n            }), _jsx(View, {\n              style: {\n                flex: 0.75\n              },\n              children: _jsx(Button, {\n                title: \"send\",\n                onPress: handleSendingMessage\n              })\n            })]\n          })]\n        })\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  map: {\n    width: \"100%\",\n    height: \"100%\",\n    zIndex: 1\n  },\n  imageModal: {\n    width: 100,\n    height: 100,\n    borderRadius: 50,\n    marginBottom: 5\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 10,\n    padding: 5,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n    height: \"60%\",\n    width: \"80%\"\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    backgroundColor: \"#DDDDDD\",\n    marginBottom: 10\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  },\n  buttonClose: {\n    backgroundColor: \"#2196F3\"\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  },\n  input: {\n    height: 30,\n    margin: 12,\n    width: \"80%\",\n    padding: 10\n  }\n});","map":{"version":3,"sources":["/Users/mutabazi3/Projects/cis400/frontend/screens/MapScreen.tsx"],"names":["MapView","Marker","Circle","React","useState","useEffect","useContext","sendMessage","UserContext","MapScreen","userLongitude","userLatitude","retrievedFriends","authToken","location","setLocation","latitude","setLatitude","friends","setFriends","longitude","setLongitude","clickedFriend","setClickedFriend","clickedFriendId","setClickedFriendId","modalVisible","setModalVisible","errorMsg","setErrorMsg","isEnabled","setIsEnabled","message","setMessage","toggleSwitch","previousState","coordinates","coordinatesF","handleOpen","id","firstName","lastName","mapMarkers","oneMile","map","item","lat","long","nd","Math","cos","ed","sin","console","log","handleSendingMessage","match","trimmedMessage","trim","then","response","catch","err","navigation","navigate","friendId","split","text","styles","container","latitudeDelta","longitudeDelta","Alert","alert","centeredView","modalView","width","backgroundColor","marginBottom","position","right","imageModal","uri","fontSize","marginTop","flexDirection","button","alignItems","borderWidth","borderColor","borderRadius","paddingLeft","paddingRight","flex","input","e","StyleSheet","create","height","zIndex","margin","padding","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","justifyContent","buttonClose","textStyle","color","fontWeight","textAlign","modalText"],"mappings":"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","sourcesContent":["// import * as React from 'react';\nimport MapView, { Marker, Callout, Circle } from \"react-native-maps\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Text,\n  View,\n  StyleSheet,\n  Switch,\n  Alert,\n  Modal,\n  TouchableHighlight,\n  TouchableOpacity,\n  Image,\n  Button,\n  TextInput,\n  Pressable,\n} from \"react-native\";\nimport { sendMessage } from \"../api\";\nimport { UserContext } from \"../Context\";\n\nexport default function MapScreen({\n  userLongitude,\n  userLatitude,\n  retrievedFriends,\n}) {\n  const authToken = useContext(UserContext);\n  const [location, setLocation] = useState(null);\n  const [latitude, setLatitude] = useState(userLatitude);\n  const [friends, setFriends] = useState(retrievedFriends);\n  const [longitude, setLongitude] = useState(userLongitude);\n  const [clickedFriend, setClickedFriend] = useState(\"\");\n  const [clickedFriendId, setClickedFriendId] = useState(\"\");\n  const [modalVisible, setModalVisible] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const [isEnabled, setIsEnabled] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const toggleSwitch = () => setIsEnabled((previousState) => !previousState);\n  //retrieves the users location\n  const coordinates = { latitude: latitude, longitude: longitude };\n  const coordinatesF = { latitude: 39.96241611314298, longitude: longitude };\n  const handleOpen = (id: string, firstName: string, lastName: string) => {\n    setClickedFriend(`${firstName} ${lastName}`);\n    setClickedFriendId(id);\n    setModalVisible(true);\n  };\n  useEffect(() => {}, []);\n\n  const mapMarkers = () => {\n    if (friends) {\n      const oneMile = friends[\"1\"].map((item: Object) => {\n        let lat = latitude;\n        let long = longitude;\n        let nd = (1600 * Math.cos(-90)) / 111111;\n        let ed = (600 * Math.sin(-90)) / Math.cos(lat) / 111111;\n        console.log(item);\n        return (\n          <Marker\n            // key={report.id}\n            coordinate={{ latitude: lat + nd, longitude: long + ed }}\n            // title={report.location}\n            // description={report.comments}\n            pinColor=\"blue\"\n            onPress={() => handleOpen(item.id, item.firstName, item.lastName)}\n          />\n        );\n      });\n      return oneMile;\n    }\n  };\n  const handleSendingMessage = () => {\n    if (message.match(/(?!^ +$)^.+$/)) {\n      let trimmedMessage = message.trim();\n      sendMessage(authToken, clickedFriendId, trimmedMessage)\n        .then((response) => {\n          console.log(\"testing chating\", response);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n      setModalVisible(!modalVisible);\n      setMessage(\"\");\n      navigation.navigate(\"message\", {\n        friendId: clickedFriendId,\n        firstName: clickedFriend.split(\" \")[0],\n        lastName: clickedFriend.split(\" \")[1],\n      });\n    }\n  };\n  let text = \"Waiting..\";\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    console.log(\"hehehe\");\n  }\n  return (\n    <View style={styles.container}>\n      <View>\n        <MapView\n          style={styles.map}\n          initialRegion={{\n            latitude: latitude,\n            longitude: longitude,\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421,\n          }}\n          onPress={() => handleOpen}\n        >\n          <Marker coordinate={coordinates} pinColor=\"#157106\" />\n          {mapMarkers()}\n          <Circle\n            onPress={() => console.log(\"pressed\")}\n            center={coordinates}\n            radius={3200}\n            strokeWidth={1}\n            strokeColor={\"#C86F6F\"}\n            fillColor={\"rgba(230,238,255,0.1)\"}\n          />\n\n          <Circle\n            onPress={() => console.log(\"pressed\")}\n            center={coordinates}\n            radius={1609}\n            strokeWidth={1}\n            strokeColor={\"#1a66ff\"}\n            fillColor={\"rgba(230,238,255)\"}\n            zIndex={3}\n          />\n          <Circle\n            onPress={() => console.log(\"pressed\")}\n            center={coordinates}\n            radius={4800}\n            strokeWidth={1}\n            strokeColor={\"#1a66ff\"}\n            fillColor={\"rgba(230,238,255,0.5)\"}\n            zIndex={1}\n          />\n        </MapView>\n      </View>\n\n      <Modal\n        animationType=\"fade\"\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => {\n          Alert.alert(\"Modal has been closed.\");\n          setModalVisible(!modalVisible);\n        }}\n      >\n        <View style={styles.centeredView}>\n          <View style={styles.modalView}>\n            <View\n              style={{\n                width: \"100%\",\n                backgroundColor: \"blue\",\n                marginBottom: 30,\n              }}\n            >\n              <View\n                style={{\n                  position: \"absolute\",\n                  right: 0,\n                }}\n              >\n                <Button\n                  title=\"Close\"\n                  onPress={() => {\n                    //clear the message in the modal\n                    setMessage(\"\");\n                    setModalVisible(!modalVisible);\n                  }}\n                ></Button>\n              </View>\n            </View>\n\n            <Image\n              style={styles.imageModal}\n              source={{\n                uri: \"https://images-na.ssl-images-amazon.com/images/I/81nKBuQzyjL.jpg\",\n              }}\n            />\n            <Text style={{ fontSize: 28 }}>{clickedFriend}</Text>\n            <Text>Quick Texts</Text>\n            <View style={{ width: \"80%\", marginTop: 10 }}>\n              <TouchableOpacity\n                style={{ flexDirection: \"column\" }}\n                onPress={() => {\n                  setMessage(\"Wanna get some lunch?\");\n                }}\n              >\n                <View style={styles.button}>\n                  <Text>Wanna get some lunch?</Text>\n                </View>\n              </TouchableOpacity>\n              <TouchableOpacity\n                onPress={() => {\n                  setMessage(\"What are you up to?\");\n                }}\n              >\n                <View style={styles.button}>\n                  <Text>What are you up to?</Text>\n                </View>\n              </TouchableOpacity>\n              <TouchableOpacity\n                onPress={() => {\n                  setMessage(\"Wanna grab a drink?\");\n                }}\n              >\n                <View style={styles.button}>\n                  <Text>Wanna grab a drink?</Text>\n                </View>\n              </TouchableOpacity>\n            </View>\n\n            <View\n              style={{\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                borderWidth: 1,\n                borderColor: \"#DDDDDD\",\n                borderRadius: 40,\n                paddingLeft: 15,\n                paddingRight: 15,\n                width: \"80%\",\n              }}\n            >\n              <View style={{ flex: 2.25 }}>\n                <TextInput\n                  value={message}\n                  style={styles.input}\n                  placeholder=\"useless placeholder\"\n                  onChangeText={(e) => {\n                    setMessage(e);\n                  }}\n                />\n              </View>\n\n              <View style={{ flex: 0.75 }}>\n                <Button title=\"send\" onPress={handleSendingMessage} />\n              </View>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    width: \"100%\",\n    height: \"100%\",\n    zIndex: 1,\n  },\n  imageModal: {\n    width: 100,\n    height: 100,\n    borderRadius: 50,\n    marginBottom: 5,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 10,\n    padding: 5,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n    height: \"60%\",\n    width: \"80%\",\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    backgroundColor: \"#DDDDDD\",\n    marginBottom: 10,\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22,\n  },\n  buttonClose: {\n    backgroundColor: \"#2196F3\",\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\",\n  },\n  input: {\n    height: 30,\n    margin: 12,\n    width: \"80%\",\n    padding: 10,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}