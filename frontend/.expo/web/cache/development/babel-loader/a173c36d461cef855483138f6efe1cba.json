{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation,\n      handleLoginCallBack = _ref.handleLoginCallBack;\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      email = _React$useState2[0],\n      setEmail = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      password = _React$useState4[0],\n      setPassword = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      errorMessage = _React$useState6[0],\n      setErrorMessage = _React$useState6[1];\n\n  var handleSetError = function handleSetError(error) {\n    setErrorMessage(error);\n  };\n\n  var handleLogin = function handleLogin() {\n    if (email === \"\" || password === \"\") {\n      setErrorMessage(\"Email and Password can't be empty\");\n    } else {\n      var trimmedEmail = email.trim();\n      var trimmedPassword = password.trim();\n      handleLoginCallBack(trimmedEmail, trimmedPassword, handleSetError);\n    }\n  };\n\n  var handleRegistration = function handleRegistration() {\n    navigation.navigate(\"Registration\");\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TextInput, {\n      placeholder: \"Email\",\n      style: styles.input,\n      onChangeText: setEmail\n    }), _jsx(TextInput, {\n      secureTextEntry: true,\n      placeholder: \"Password\",\n      style: styles.input,\n      onChangeText: setPassword\n    }), _jsx(Text, {\n      style: {\n        color: \"red\"\n      },\n      children: errorMessage\n    }), _jsxs(Text, {\n      style: styles.text,\n      children: [\"Don't have an account?\", \" \", _jsx(Text, {\n        style: styles.hyperlink,\n        onPress: handleRegistration,\n        children: \"Sign up here.\"\n      })]\n    }), _jsx(Button, {\n      title: \"Login\",\n      onPress: handleLogin\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  input: {\n    width: \"90%\",\n    marginVertical: 5,\n    borderWidth: 0,\n    borderBottomWidth: 1,\n    padding: 10\n  },\n  text: {\n    fontWeight: \"bold\",\n    paddingBottom: 5\n  },\n  hyperlink: {\n    color: \"blue\",\n    textDecorationLine: \"underline\"\n  }\n});","map":{"version":3,"sources":["/Users/mutabazi3/Projects/cis400/frontend/screens/LoginScreen.tsx"],"names":["React","LoginScreen","navigation","handleLoginCallBack","useState","email","setEmail","password","setPassword","errorMessage","setErrorMessage","handleSetError","error","handleLogin","trimmedEmail","trim","trimmedPassword","handleRegistration","navigate","styles","container","input","color","text","hyperlink","StyleSheet","create","flex","alignItems","justifyContent","width","marginVertical","borderWidth","borderBottomWidth","padding","fontWeight","paddingBottom","textDecorationLine"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport AppContext from \"../AppContext\";\n\nimport {\n  Text,\n  View,\n  StyleSheet,\n  TextInput,\n  Button,\n  SafeAreaView,\n} from \"react-native\";\n\nexport default function LoginScreen({\n  navigation,\n  handleLoginCallBack,\n}: {\n  navigation: any;\n  handleLoginCallBack: (\n    email: String,\n    password: String,\n    callBack: (error: string) => void\n  ) => void;\n}) {\n  const [email, setEmail] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  const [errorMessage, setErrorMessage] = React.useState(\"\");\n\n  const handleSetError = (error: string) => {\n    setErrorMessage(error);\n  };\n  const handleLogin = () => {\n    if (email === \"\" || password === \"\") {\n      setErrorMessage(\"Email and Password can't be empty\");\n    } else {\n      let trimmedEmail = email.trim();\n      let trimmedPassword = password.trim();\n      handleLoginCallBack(trimmedEmail, trimmedPassword, handleSetError);\n    }\n  };\n  const handleRegistration = () => {\n    navigation.navigate(\"Registration\");\n  };\n  return (\n    <View style={styles.container}>\n      <TextInput\n        placeholder=\"Email\"\n        style={styles.input}\n        onChangeText={setEmail}\n      />\n      <TextInput\n        secureTextEntry={true}\n        placeholder=\"Password\"\n        style={styles.input}\n        onChangeText={setPassword}\n      />\n      <Text style={{ color: \"red\" }}>{errorMessage}</Text>\n      <Text style={styles.text}>\n        Don't have an account?{\" \"}\n        <Text style={styles.hyperlink} onPress={handleRegistration}>\n          Sign up here.\n        </Text>\n      </Text>\n      <Button title=\"Login\" onPress={handleLogin} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  input: {\n    width: \"90%\",\n    marginVertical: 5,\n    borderWidth: 0,\n    borderBottomWidth: 1,\n    padding: 10,\n  },\n\n  text: {\n    fontWeight: \"bold\",\n    paddingBottom: 5,\n  },\n\n  hyperlink: {\n    color: \"blue\",\n    textDecorationLine: \"underline\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}