{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport RegistrationScreen from \"./screens/RegistrationScreen\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport TabScreen from \"./screens/HomeScreen\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { useEffect, useState } from \"react\";\nimport MessageScreen from \"./screens/MessageScreen\";\nimport { login } from \"./api\";\nimport * as SecureStore from \"expo-secure-store\";\nimport React from \"react\";\nimport { UserContext } from \"./Context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createBottomTabNavigator();\n\nfunction save(key, value) {\n  return _regeneratorRuntime.async(function save$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(SecureStore.setItemAsync(key, value));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getValueFor(key) {\n  var result;\n  return _regeneratorRuntime.async(function getValueFor$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(SecureStore.getItemAsync(key));\n\n        case 2:\n          result = _context2.sent;\n\n          if (!result) {\n            _context2.next = 8;\n            break;\n          }\n\n          alert(\"🔐 Here's your value 🔐 \\n\" + result);\n          return _context2.abrupt(\"return\", result);\n\n        case 8:\n          return _context2.abrupt(\"return\", null);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n  var Stack = createStackNavigator();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoggedIn = _useState2[0],\n      setIsLoggedIn = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      authToken = _useState4[0],\n      setToken = _useState4[1];\n\n  var handleLogin = function handleLogin(email, password, callBack) {\n    login(email, password).then(function (response) {\n      setIsLoggedIn(true);\n      save(\"authToken\", response.data);\n      setToken(response.data);\n      console.log(\"userINfor\", response.data);\n      callBack(\"\");\n    }).catch(function (error) {\n      switch (error.response.status) {\n        case 401:\n          callBack(\"Invalid password\");\n          break;\n\n        case 404:\n          callBack(\"User not found\");\n          break;\n      }\n    });\n  };\n\n  var handleLogout = function handleLogout() {\n    setIsLoggedIn(false);\n    SecureStore.deleteItemAsync(\"authToken\").then(function (res) {\n      console.log(\"successfull\", res);\n    }).catch(function (error) {\n      console.log(\"failed\", error);\n    });\n  };\n\n  var handleRegistration = function handleRegistration() {\n    navigation.navigate(\"Registration\", {\n      name: \"Arnaud\"\n    });\n  };\n\n  useEffect(function () {\n    SecureStore.getItemAsync(\"authToken\").then(function (response) {\n      setToken(authToken);\n    });\n  }, []);\n  return _jsx(UserContext.Provider, {\n    value: authToken,\n    children: _jsxs(NavigationContainer, {\n      children: [_jsx(StatusBar, {\n        hidden: false,\n        backgroundColor: \"#00BCD4\",\n        translucent: true\n      }), _jsx(Stack.Navigator, {\n        screenOptions: {\n          headerShown: false\n        },\n        children: isLoggedIn && authToken !== \"\" ? _jsxs(_Fragment, {\n          children: [_jsx(Stack.Screen, {\n            name: \"Home\",\n            options: {\n              title: \"\"\n            },\n            children: function children(props) {\n              return _jsx(TabScreen, _objectSpread(_objectSpread({}, props), {}, {\n                handleLogoutCallBack: handleLogout\n              }));\n            }\n          }), _jsx(Stack.Screen, {\n            name: \"message\",\n            component: MessageScreen\n          })]\n        }) : _jsxs(_Fragment, {\n          children: [_jsx(Stack.Screen, {\n            name: \"Login\",\n            options: {\n              title: \"Login\"\n            },\n            children: function children(props) {\n              return _jsx(LoginScreen, _objectSpread(_objectSpread({}, props), {}, {\n                handleLoginCallBack: handleLogin\n              }));\n            }\n          }), _jsx(Stack.Screen, {\n            name: \"Registration\",\n            component: RegistrationScreen,\n            options: {\n              title: \"Registration\"\n            }\n          })]\n        })\n      })]\n    })\n  });\n}","map":{"version":3,"sources":["/Users/mutabazi3/Projects/cis400/frontend/App.tsx"],"names":["StatusBar","LoginScreen","RegistrationScreen","NavigationContainer","createStackNavigator","TabScreen","createBottomTabNavigator","useEffect","useState","MessageScreen","login","SecureStore","React","UserContext","Tab","save","key","value","setItemAsync","getValueFor","getItemAsync","result","alert","App","navigation","Stack","isLoggedIn","setIsLoggedIn","authToken","setToken","handleLogin","email","password","callBack","then","response","data","console","log","catch","error","status","handleLogout","deleteItemAsync","res","handleRegistration","navigate","name","headerShown","title","props"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet } from \"react-native\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport RegistrationScreen from \"./screens/RegistrationScreen\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport TabScreen from \"./screens/HomeScreen\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { useEffect, useState } from \"react\";\nimport MessageScreen from \"./screens/MessageScreen\";\nimport { login } from \"./api\";\nimport * as SecureStore from \"expo-secure-store\";\nimport React from \"react\";\nimport { UserContext } from \"./Context\";\n\nconst Tab = createBottomTabNavigator();\n\n//Function for storing the token\nasync function save(key: string, value: string) {\n  await SecureStore.setItemAsync(key, value);\n}\n//Function for retrieve user login token\nasync function getValueFor(key: string) {\n  let result = await SecureStore.getItemAsync(key);\n  if (result) {\n    alert(\"🔐 Here's your value 🔐 \\n\" + result);\n    return result;\n  } else {\n    return null;\n  }\n}\n\nexport default function App({ navigation }: { navigation: any }) {\n  const Stack = createStackNavigator();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [authToken, setToken] = useState(\"\");\n\n  const handleLogin = (\n    email: String,\n    password: String,\n    callBack: (error: string) => void\n  ) => {\n    login(email, password)\n      .then((response) => {\n        setIsLoggedIn(true);\n        save(\"authToken\", response.data);\n        setToken(response.data);\n        console.log(\"userINfor\", response.data);\n        callBack(\"\");\n      })\n      .catch((error) => {\n        switch (error.response.status) {\n          case 401:\n            callBack(\"Invalid password\");\n            break;\n          case 404:\n            callBack(\"User not found\");\n            break;\n        }\n      });\n  };\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    SecureStore.deleteItemAsync(\"authToken\")\n      .then((res) => {\n        console.log(\"successfull\", res);\n      })\n      .catch((error) => {\n        console.log(\"failed\", error);\n      });\n  };\n  const handleRegistration = () => {\n    navigation.navigate(\"Registration\", { name: \"Arnaud\" });\n  };\n  useEffect(() => {\n    SecureStore.getItemAsync(\"authToken\").then((response) => {\n      setToken(authToken);\n    });\n  }, []);\n\n  return (\n    <UserContext.Provider value={authToken}>\n      <NavigationContainer>\n        <StatusBar\n          hidden={false}\n          backgroundColor=\"#00BCD4\"\n          translucent={true}\n        />\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          {isLoggedIn && authToken !== \"\" ? (\n            <>\n              <Stack.Screen name=\"Home\" options={{ title: \"\" }}>\n                {(props) => (\n                  <TabScreen {...props} handleLogoutCallBack={handleLogout} />\n                )}\n              </Stack.Screen>\n              <Stack.Screen name=\"message\" component={MessageScreen} />\n            </>\n          ) : (\n            <>\n              <Stack.Screen name=\"Login\" options={{ title: \"Login\" }}>\n                {(props) => (\n                  <LoginScreen {...props} handleLoginCallBack={handleLogin} />\n                )}\n              </Stack.Screen>\n\n              <Stack.Screen\n                name=\"Registration\"\n                component={RegistrationScreen}\n                options={{ title: \"Registration\" }}\n              />\n            </>\n          )}\n        </Stack.Navigator>\n      </NavigationContainer>\n    </UserContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}