{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { register } from \"../api\";\nimport { inputValidation, passwordCheck } from \"./Action\";\nimport Button from \"../components/Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function RegistrationScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      firstName = _React$useState2[0],\n      setFirstName = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      lastName = _React$useState4[0],\n      setLastName = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      email = _React$useState6[0],\n      setEmail = _React$useState6[1];\n\n  var _React$useState7 = React.useState(\"\"),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      password = _React$useState8[0],\n      setPassword = _React$useState8[1];\n\n  var _React$useState9 = React.useState(\"\"),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      passwordConfirmation = _React$useState10[0],\n      setPasswordConfirmation = _React$useState10[1];\n\n  var _React$useState11 = React.useState(\"\"),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      errorMessage = _React$useState12[0],\n      setErrorMessage = _React$useState12[1];\n\n  var _React$useState13 = React.useState(true),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      signupDisable = _React$useState14[0],\n      setDisable = _React$useState14[1];\n\n  var _React$useState15 = React.useState(false),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      editable = _React$useState16[0],\n      setEditable = _React$useState16[1];\n\n  var handleSignup = function handleSignup() {\n    register(email, password, firstName, lastName).then(function (response) {\n      navigation.navigate(\"Login\", {\n        name: \"Daniel\",\n        message: \"hehahha\"\n      });\n    }).catch(function (error) {\n      setErrorMessage(\"Internal error. Try again :(\");\n    });\n  };\n\n  return _jsx(View, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"ios\" ? \"padding\" : \"height\",\n      style: styles.container,\n      children: _jsxs(View, {\n        style: styles.inner,\n        children: [_jsx(TextInput, {\n          placeholder: \"First name\",\n          style: styles.input,\n          onChangeText: function onChangeText(val) {\n            if (inputValidation(val, lastName, email)) {\n              switch (passwordCheck(password, passwordConfirmation)) {\n                case \"Passwords match\":\n                  setErrorMessage(\"You can register :)\");\n                  setDisable(false);\n                  break;\n\n                default:\n                  setDisable(true);\n              }\n            } else {\n              setDisable(true);\n            }\n\n            setFirstName(val);\n          }\n        }), _jsx(TextInput, {\n          placeholder: \"Last name\",\n          style: styles.input,\n          onChangeText: function onChangeText(val) {\n            if (inputValidation(firstName, val, email)) {\n              switch (passwordCheck(password, passwordConfirmation)) {\n                case \"Passwords match\":\n                  setErrorMessage(\"You can register :)\");\n                  setDisable(false);\n                  break;\n\n                default:\n                  setDisable(true);\n              }\n            } else {\n              setDisable(true);\n            }\n\n            setLastName(val);\n          }\n        }), _jsx(TextInput, {\n          placeholder: \"Email\",\n          style: styles.input,\n          onChangeText: function onChangeText(val) {\n            if (inputValidation(firstName, lastName, val)) {\n              switch (passwordCheck(password, passwordConfirmation)) {\n                case \"Passwords match\":\n                  setErrorMessage(\"You can now register :)\");\n                  setDisable(false);\n                  break;\n\n                default:\n                  setDisable(true);\n              }\n            } else {\n              setDisable(true);\n            }\n\n            setEmail(val);\n          }\n        }), _jsx(TextInput, {\n          secureTextEntry: true,\n          placeholder: \"Password\",\n          style: styles.input,\n          onChangeText: function onChangeText(val) {\n            console.log(\"passwords\", [val, passwordConfirmation, val === passwordConfirmation]);\n            setPassword(val);\n\n            switch (passwordCheck(val, passwordConfirmation)) {\n              case \"Valid Password\":\n                setEditable(true);\n                setErrorMessage(\"Valid Password\");\n                break;\n\n              case \"Invalid Password\":\n                setEditable(false);\n                setErrorMessage(\"Invalid Password\");\n                break;\n\n              case \"Passwords match\":\n                if (inputValidation(firstName, lastName, email)) {\n                  setEditable(true);\n                  setDisable(false);\n                  setErrorMessage(\"Passwords match\");\n                } else {\n                  setErrorMessage(\"Missing inputs :)\");\n                }\n\n                break;\n\n              default:\n                setEditable(true);\n                setDisable(true);\n                setErrorMessage(\"Passwords don't match\");\n                break;\n            }\n          }\n        }), _jsx(TextInput, {\n          secureTextEntry: true,\n          textContentType: \"password\",\n          placeholder: \"Confirm Password\",\n          style: styles.input,\n          onChangeText: function onChangeText(val) {\n            setPasswordConfirmation(val);\n\n            switch (passwordCheck(password, val)) {\n              case \"Passwords match\":\n                if (inputValidation(firstName, lastName, email)) {\n                  setDisable(true);\n                } else {\n                  setErrorMessage(\"Missing inputs :)\");\n                }\n\n                break;\n\n              default:\n                console.log(\"passwords\", {\n                  password: password,\n                  val: val\n                });\n                setDisable(true);\n                setErrorMessage(\"Password don't match\");\n                break;\n            }\n          },\n          editable: editable\n        }), _jsx(Text, {\n          style: {\n            color: \"red\",\n            textAlign: \"center\"\n          },\n          children: errorMessage\n        }), _jsx(Button, {\n          disabled: signupDisable,\n          title: \"Sign up\",\n          onPress: handleSignup\n        })]\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\"\n  },\n  input: {\n    width: \"90%\",\n    marginVertical: 5,\n    borderWidth: 0,\n    borderBottomWidth: 1,\n    padding: 10,\n    alignSelf: \"center\"\n  },\n  inner: {\n    marginLeft: 10,\n    marginRight: 10\n  }\n});","map":{"version":3,"sources":["/Users/mutabazi3/Projects/cis400/frontend/screens/RegistrationScreen.tsx"],"names":["React","register","inputValidation","passwordCheck","Button","RegistrationScreen","navigation","useState","firstName","setFirstName","lastName","setLastName","email","setEmail","password","setPassword","passwordConfirmation","setPasswordConfirmation","errorMessage","setErrorMessage","signupDisable","setDisable","editable","setEditable","handleSignup","then","response","navigate","name","message","catch","error","flex","Platform","OS","styles","container","inner","input","val","console","log","color","textAlign","StyleSheet","create","justifyContent","width","marginVertical","borderWidth","borderBottomWidth","padding","alignSelf","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  StyleSheet,\n  TextInput,\n  Text,\n  KeyboardAvoidingView,\n  Platform,\n  TouchableWithoutFeedback,\n  Keyboard,\n} from \"react-native\";\nimport { register } from \"../api\";\nimport { inputValidation, passwordCheck } from \"./Action\";\nimport Button from \"../components/Button\";\n\nexport default function RegistrationScreen({\n  navigation,\n}: {\n  navigation: any;\n}) {\n  const [firstName, setFirstName] = React.useState(\"\");\n  const [lastName, setLastName] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  const [passwordConfirmation, setPasswordConfirmation] = React.useState(\"\");\n  const [errorMessage, setErrorMessage] = React.useState(\"\");\n  const [signupDisable, setDisable] = React.useState(true);\n  const [editable, setEditable] = React.useState(false);\n\n  const handleSignup = () => {\n    register(email, password, firstName, lastName)\n      .then(function (response) {\n        navigation.navigate(\"Login\", { name: \"Daniel\", message: \"hehahha\" });\n      })\n      .catch(function (error) {\n        setErrorMessage(\"Internal error. Try again :(\");\n      });\n  };\n\n  return (\n    <View style={{ flex: 1 }}>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n        style={styles.container}\n      >\n        <View style={styles.inner}>\n          <TextInput\n            placeholder=\"First name\"\n            style={styles.input}\n            onChangeText={(val) => {\n              if (inputValidation(val, lastName, email)) {\n                switch (passwordCheck(password, passwordConfirmation)) {\n                  case \"Passwords match\":\n                    setErrorMessage(\"You can register :)\");\n                    setDisable(false);\n                    break;\n                  default:\n                    setDisable(true);\n                }\n              } else {\n                setDisable(true);\n              }\n              setFirstName(val);\n            }}\n          />\n          <TextInput\n            placeholder=\"Last name\"\n            style={styles.input}\n            onChangeText={(val) => {\n              if (inputValidation(firstName, val, email)) {\n                switch (passwordCheck(password, passwordConfirmation)) {\n                  case \"Passwords match\":\n                    setErrorMessage(\"You can register :)\");\n                    setDisable(false);\n                    break;\n                  default:\n                    setDisable(true);\n                }\n              } else {\n                setDisable(true);\n              }\n              setLastName(val);\n            }}\n          />\n          <TextInput\n            placeholder=\"Email\"\n            style={styles.input}\n            onChangeText={(val) => {\n              if (inputValidation(firstName, lastName, val)) {\n                switch (passwordCheck(password, passwordConfirmation)) {\n                  case \"Passwords match\":\n                    setErrorMessage(\"You can now register :)\");\n                    setDisable(false);\n                    break;\n                  default:\n                    setDisable(true);\n                }\n              } else {\n                setDisable(true);\n              }\n              setEmail(val);\n            }}\n          />\n          <TextInput\n            secureTextEntry={true}\n            placeholder=\"Password\"\n            style={styles.input}\n            onChangeText={(val) => {\n              console.log(\"passwords\", [\n                val,\n                passwordConfirmation,\n                val === passwordConfirmation,\n              ]);\n              setPassword(val);\n              switch (passwordCheck(val, passwordConfirmation)) {\n                case \"Valid Password\":\n                  setEditable(true);\n                  setErrorMessage(\"Valid Password\");\n                  break;\n                case \"Invalid Password\":\n                  setEditable(false);\n                  setErrorMessage(\"Invalid Password\");\n                  break;\n                case \"Passwords match\":\n                  if (inputValidation(firstName, lastName, email)) {\n                    setEditable(true);\n                    setDisable(false);\n                    setErrorMessage(\"Passwords match\");\n                  } else {\n                    setErrorMessage(\"Missing inputs :)\");\n                  }\n                  break;\n                default:\n                  setEditable(true);\n                  setDisable(true);\n                  setErrorMessage(\"Passwords don't match\");\n                  break;\n              }\n            }}\n          />\n          <TextInput\n            secureTextEntry={true}\n            textContentType=\"password\"\n            placeholder=\"Confirm Password\"\n            style={styles.input}\n            onChangeText={(val) => {\n              setPasswordConfirmation(val);\n              switch (passwordCheck(password, val)) {\n                case \"Passwords match\":\n                  if (inputValidation(firstName, lastName, email)) {\n                    setDisable(true);\n                  } else {\n                    setErrorMessage(\"Missing inputs :)\");\n                  }\n                  break;\n                default:\n                  console.log(\"passwords\", { password, val });\n                  setDisable(true);\n                  setErrorMessage(\"Password don't match\");\n                  break;\n              }\n            }}\n            editable={editable}\n          />\n          <Text style={{ color: \"red\", textAlign: \"center\" }}>\n            {errorMessage}\n          </Text>\n          <Button\n            disabled={signupDisable}\n            title=\"Sign up\"\n            onPress={handleSignup}\n          />\n        </View>\n      </KeyboardAvoidingView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n  },\n  input: {\n    width: \"90%\",\n    marginVertical: 5,\n    borderWidth: 0,\n    borderBottomWidth: 1,\n    padding: 10,\n    alignSelf: \"center\",\n  },\n  inner: {\n    marginLeft: 10,\n    marginRight: 10,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}